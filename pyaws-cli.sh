#!/bin/bash

#set -o xtrace

if [[ -z $PYAWS_CLI_ENV_ALLOW_EXECUTE_SHELL_SCRIPT ]]; then
  echo "This is not allowed to run shell script directly"
  echo "You must run it from pyaws command line (pipenv run python pyaws-cli.py)"
  echo "This is to avoid undesired production updates"
  exit 0
fi

PYAWS_ADMIN_SECRET_KEY="${PYAWS_ADMIN_SECRET_KEY:-}"
PYAWS_ADMIN_IP="${PYAWS_ADMIN_IP:-}"
PYAWS_CLI_DOMAIN="${PYAWS_CLI_DOMAIN:-}"
PYAWS_CLI_IMAGE_SUBDOMAIN="${PYAWS_CLI_IMAGE_SUBDOMAIN:-}"
PYAWS_CLI_CF_ZONE_ID="${PYAWS_CLI_CF_ZONE_ID:-}"
PYAWS_CLI_CF_ACCOUNT_ID="${PYAWS_CLI_CF_ACCOUNT_ID:-}"
PYAWS_CLI_CF_API_TOKEN="${PYAWS_CLI_CF_API_TOKEN:-}"
PYAWS_CLI_ENV_ACTION="${PYAWS_CLI_ENV_ACTION:-}"
PYAWS_CLI_AWS_STAGE="${PYAWS_CLI_AWS_STAGE:-}"
PYAWS_CLI_AWS_ACCESS_KEY_ID="${PYAWS_CLI_AWS_ACCESS_KEY_ID:-}"
PYAWS_CLI_AWS_SECRET_ACCESS_KEY="${PYAWS_CLI_AWS_SECRET_ACCESS_KEY:-}"
PYAWS_CLI_RECAPTCHA="${PYAWS_CLI_RECAPTCHA:-}"
PYAWS_CLI_AWS_REGION="${PYAWS_CLI_AWS_REGION:-}"
PYAWS_CLI_AWS_SNS_EMAIL_REGION="${PYAWS_CLI_AWS_SNS_EMAIL_REGION:-}"
PYAWS_CLI_KV_AUTOCOMPLETE_NAMESPACE_ID="${PYAWS_CLI_KV_AUTOCOMPLETE_NAMESPACE_ID:-}"
PYAWS_CLI_KV_CACHE_NAMESPACE_ID="${PYAWS_CLI_KV_CACHE_NAMESPACE_ID:-}"
PYAWS_VERSION=$(cat release-version.json | jq '.version')

if [ "$PYAWS_CLI_ENV_ACTION" != "deploy" ] && [ "$PYAWS_CLI_ENV_ACTION" != "dbmigrate" ]; then
   if [ "$PYAWS_CLI_AWS_STAGE" == "prod" ]; then
     echo "Only allowed action for production is deploy, skipping."
     exit 0
   fi
fi

export AWS_ACCESS_KEY_ID="$PYAWS_CLI_AWS_ACCESS_KEY_ID"
export AWS_SECRET_ACCESS_KEY="$PYAWS_CLI_AWS_SECRET_ACCESS_KEY"
export AWS_DEFAULT_REGION="$PYAWS_CLI_AWS_REGION"

if [ "$PYAWS_CLI_ENV_ACTION" == "undeploy" ]; then
   echo "Undeploy stack, target environment: [$PYAWS_CLI_AWS_STAGE] version: [$PYAWS_VERSION]"
   echo "Perform clean of resources that CDK is supporting to delete..."
   echo "Delete dev system bucket"
   aws s3 rb s3://img.your-domain.com --force

   pipenv shell
   cd infra || exit
   cdk destroy WebApiDev
   exit 0
fi

if [ "$PYAWS_CLI_ENV_ACTION" == "test" ]; then
   echo "Running tests, target environment: [$PYAWS_CLI_AWS_STAGE] version: [$PYAWS_VERSION]"
   pipenv shell
   cd web-api || exit
   pytest
   exit 0
fi

if [ "$PYAWS_CLI_ENV_ACTION" == "dbmigrate" ]; then
   echo "Running DB migration, target environment: [$PYAWS_CLI_AWS_STAGE] version: [$PYAWS_VERSION]"
   pipenv shell
   cd web-api || exit
   pip3 install -r requirements.txt
   cd .. || exit
   pipenv run python web-api/dbmigration.py
   exit 0
fi

if [ "$PYAWS_CLI_ENV_ACTION" == "kvmigrate" ]; then
   echo "Running KV migration, target environment: [$PYAWS_CLI_AWS_STAGE] version: [$PYAWS_VERSION]"
   export PYAWS_CLI_CF_ACCOUNT_ID
   export PYAWS_CLI_CF_API_TOKEN
   export PYAWS_CLI_KV_AUTOCOMPLETE_NAMESPACE_ID
   export PYAWS_CLI_KV_CACHE_NAMESPACE_ID
   cd worker || exit
   ./kv-migrate.sh
   exit 0
fi

echo "Deploying stack, target environment: [$PYAWS_CLI_AWS_STAGE] version: [$PYAWS_VERSION]"

# package version is included in frontend
mkdir -p frontend/data/
cp release-version.json frontend/data/
pipenv shell
cd web-api || exit
pip3  install -r requirements.txt
rm -rf .chalice/deployment
cd ..
cd infra || exit
cdk bootstrap
cdk synth
cdk deploy WebApiDev
ret=$?
if [ $ret -ne 0 ]; then
    echo "AWS CDK DEPLOYMENT FAILURE"
    exit
else
    echo "AWS CDK DEPLOYMENT SUCCESS"
fi

echo "====================================================="
echo "Post deploy steps"
echo "====================================================="
cd .. || exit
pipenv run python web-api/dbmigration.py

echo "====================================================="
echo "Direct AWS CLI changes that are not supported by CDK"
echo "====================================================="

REST_API_ID=$(aws apigateway get-rest-apis --output text --query "items[*].id")
echo "REST_API_ID: $REST_API_ID"

echo "Checking if stage 'Stage' exists"
aws apigateway get-stage --rest-api-id $REST_API_ID --stage-name Stage --output text
if [ $? -eq 0 ]; then
   echo "Delete unused 'Stage' stage generated by chalice"
   aws apigateway delete-stage --rest-api-id $REST_API_ID --stage-name Stage
fi
echo "Finished checking 'Stage' topic"

#echo "Change throttling for REST API V1 stage to 100/50"
aws apigateway update-stage --rest-api-id $REST_API_ID --stage-name v1 \
    --patch-operations op=replace,path=/*/*/throttling/rateLimit,value=10
aws apigateway update-stage --rest-api-id $REST_API_ID --stage-name v1 \
    --patch-operations op=replace,path=/*/*/throttling/burstLimit,value=5

# Chalice won't support log group retention policy change, it is enough to iterate over them on every deploy
# And change retention policy to 1 week to all.
echo "Update existing log groups retention policy to 7 days"
for logGroupName in $(aws logs describe-log-groups  --output text --query "logGroups[*].logGroupName") ; do
   echo $logGroupName;
   aws logs put-retention-policy --log-group-name $logGroupName  --retention-in-days 7;
done

#echo "====================================================="
#echo "Deploy to Cloudflare Worker Site"
#echo "====================================================="
cd worker || exit
wrangler_backup=$(mktemp)
cp wrangler.toml $wrangler_backup
WRANGLER_WITH_REST_API=$(sed 's/KV_AUTOCOMPLETE_NAMESPACE_ID/'"$PYAWS_CLI_KV_AUTOCOMPLETE_NAMESPACE_ID"'/' wrangler.toml)
echo "$WRANGLER_WITH_REST_API" > wrangler.toml
WRANGLER_WITH_REST_API=$(sed 's/KV_CACHE_NAMESPACE_ID/'"$PYAWS_CLI_KV_CACHE_NAMESPACE_ID"'/' wrangler.toml)
echo "$WRANGLER_WITH_REST_API" > wrangler.toml
WRANGLER_WITH_REST_API=$(sed 's/PYAWS_ADMIN_SECRET_KEY/'"$PYAWS_ADMIN_SECRET_KEY"'/' wrangler.toml)
echo "$WRANGLER_WITH_REST_API" > wrangler.toml
WRANGLER_WITH_REST_API=$(sed 's/PYAWS_ADMIN_IP/'"$PYAWS_ADMIN_IP"'/' wrangler.toml)
echo "$WRANGLER_WITH_REST_API" > wrangler.toml
WRANGLER_WITH_REST_API=$(sed 's/REST_API_ID_TOKEN/'"$REST_API_ID"'/' wrangler.toml)
echo "$WRANGLER_WITH_REST_API" > wrangler.toml
WRANGLER_WITH_REST_API=$(sed 's/ROUTE_DOMAIN/'"$PYAWS_CLI_DOMAIN"'/g' wrangler.toml)
echo "$WRANGLER_WITH_REST_API" > wrangler.toml
WRANGLER_WITH_REST_API=$(sed 's/CF_ZONE_ID/'"$PYAWS_CLI_CF_ZONE_ID"'/g' wrangler.toml)
echo "$WRANGLER_WITH_REST_API" > wrangler.toml
WRANGLER_WITH_REST_API=$(sed 's/REST_API_REGION/'"$PYAWS_CLI_AWS_REGION"'/g' wrangler.toml)
echo "$WRANGLER_WITH_REST_API" > wrangler.toml
WRANGLER_WITH_REST_API=$(sed 's/STAGE/'"$PYAWS_CLI_AWS_STAGE"'/g' wrangler.toml)
echo "$WRANGLER_WITH_REST_API" > wrangler.toml
WRANGLER_WITH_REST_API=$(sed 's/RECAPTCHA_KEY/'"$PYAWS_CLI_RECAPTCHA"'/g' wrangler.toml)
echo "$WRANGLER_WITH_REST_API" > wrangler.toml
echo "$WRANGLER_WITH_REST_API" > wrangler_bak.toml

export PYAWS_CLI_CF_ACCOUNT_ID
export PYAWS_CLI_CF_API_TOKEN
export PYAWS_CLI_KV_AUTOCOMPLETE_NAMESPACE_ID
export PYAWS_CLI_KV_CACHE_NAMESPACE_ID
./kv-migrate.sh
./build-deploy.sh
cp $wrangler_backup wrangler.toml
cd .. || exit



